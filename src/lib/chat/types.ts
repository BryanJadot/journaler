import { roleEnum, outputTypeEnum } from '@/lib/db/schema';

/**
 * Role type extracted from the database schema enum.
 *
 * Represents the different types of participants in a chat conversation.
 * This type is derived from the roleEnum defined in the database schema,
 * ensuring consistency between the database constraints and TypeScript types.
 *
 * @typedef {('user' | 'assistant' | 'developer')} Role
 *
 * Possible values:
 * - 'user': Human user sending messages
 * - 'assistant': AI assistant generating responses
 * - 'developer': System-level messages or developer notes
 *
 * @example
 * ```typescript
 * const userRole: Role = 'user';
 * const botRole: Role = 'assistant';
 * const systemRole: Role = 'developer'; // Maps to 'system' in AI SDK
 * ```
 */
export type Role = (typeof roleEnum.enumValues)[number];

/**
 * Output type extracted from the database schema enum.
 *
 * Defines the format or presentation style of message content.
 * This type ensures that message output formats are consistent
 * with the database schema constraints.
 *
 * @typedef {('text' | 'markdown' | 'code' | 'json')} OutputType
 *
 * Possible values:
 * - 'text': Plain text without formatting
 * - 'markdown': Rich text with markdown formatting
 * - 'code': Code blocks with syntax highlighting
 * - 'json': Structured JSON data
 *
 * @example
 * ```typescript
 * const plainText: OutputType = 'text';
 * const formattedText: OutputType = 'markdown';
 * const codeBlock: OutputType = 'code';
 * const structuredData: OutputType = 'json';
 * ```
 */
export type OutputType = (typeof outputTypeEnum.enumValues)[number];

/**
 * Represents a single chat message in a conversation thread.
 *
 * This is the core message type used throughout the application for:
 * - Displaying messages in the UI
 * - Storing messages in the database
 * - Passing messages between server and client components
 * - Interfacing with the AI SDK (with role mapping)
 *
 * @interface ChatMessage
 *
 * @property {string} id - Unique identifier for the message
 *   - Format: UUID v4 (e.g., '123e4567-e89b-12d3-a456-426614174000')
 *   - Generated by the database on insert
 *   - Used for React key props and message references
 *
 * @property {'user' | 'assistant' | 'developer' | 'system'} role - Message sender/source
 *   - 'user': Messages from the human user
 *   - 'assistant': AI-generated responses
 *   - 'developer': System messages or developer annotations
 *   - 'system': Alternative system role (may be mapped from 'developer')
 *   Note: 'developer' in DB maps to 'system' when interfacing with AI SDK
 *
 * @property {string} content - The message text content
 *   - Can contain plain text, markdown, code, or JSON based on context
 *   - Maximum length typically enforced at database level
 *   - May include special formatting or commands
 *
 * @property {string} createdAt - Message creation timestamp
 *   - ISO 8601 format string (e.g., '2024-01-15T10:30:00.000Z')
 *   - Used for ordering messages chronologically
 *   - Displayed in UI with relative time formatting
 *
 * @example
 * ```typescript
 * // User message example
 * const userMessage: ChatMessage = {
 *   id: '123e4567-e89b-12d3-a456-426614174000',
 *   role: 'user',
 *   content: 'Can you explain how async/await works?',
 *   createdAt: '2024-01-15T10:30:00.000Z'
 * };
 *
 * // Assistant response example
 * const assistantMessage: ChatMessage = {
 *   id: '987fcdeb-51a2-43f1-9876-543210fedcba',
 *   role: 'assistant',
 *   content: 'Async/await is a modern way to handle asynchronous operations...',
 *   createdAt: '2024-01-15T10:30:05.000Z'
 * };
 * ```
 *
 * @see {@link ChatInterface} - UI component that renders these messages
 * @see {@link getThreadWithMessages} - Service function that fetches messages
 * @see {@link createMessage} - Service function that creates new messages
 */
export type ChatMessage = {
  id: string;
  role: 'user' | 'assistant' | 'developer' | 'system';
  content: string;
  createdAt: string;
};

/**
 * Lightweight representation of a chat thread for navigation and listing.
 *
 * This type is used for thread summaries in the sidebar and thread listings,
 * containing only the essential information needed for display and navigation
 * without loading the full message history.
 *
 * @interface ThreadSummary
 *
 * @property {string} id - Unique thread identifier
 *   - Format: UUID v4
 *   - Used for routing to thread chat pages via getChatUrl()
 *   - Primary key in the threads database table
 *
 * @property {string} name - Display name of the thread
 *   - User-facing title shown in the sidebar
 *   - May be auto-generated from first message or user-defined
 *   - Truncated with ellipsis in UI if too long
 *   - Maximum length typically 255 characters
 *
 * @property {Date} updatedAt - Last activity timestamp
 *   - JavaScript Date object (not string like in ChatMessage)
 *   - Used for sorting threads by recency
 *   - Updated whenever a new message is added to the thread
 *   - Displayed as relative time in UI (e.g., "2 hours ago")
 *
 * @example
 * ```typescript
 * const thread: ThreadSummary = {
 *   id: 'abc123de-f456-7890-abcd-ef1234567890',
 *   name: 'JavaScript Performance Optimization',
 *   updatedAt: new Date('2024-01-15T14:30:00.000Z')
 * };
 *
 * // Used in sidebar navigation
 * threads.map(thread => (
 *   <Link href={getChatUrl(thread.id)}>
 *     {thread.name}
 *   </Link>
 * ))
 * ```
 *
 * @see {@link Sidebar} - Component that displays thread summaries
 * @see {@link getThreadSummariesForUser} - Service function that fetches summaries
 * @see {@link getChatUrl} - Helper function for generating thread URLs
 */
export type ThreadSummary = {
  id: string;
  name: string;
  updatedAt: Date;
};
